App.js:

import logo from './logo.svg';
import './App.css';
import PostList from './components/PostList';
import { Provider } from 'react-redux';
import store from './store/store'

function App() {
  return (
    <Provider store={store}>
    <div >
     <PostList/>
    </div>
    </Provider>
  );
}

export default App;


PostActions.js:

export const fetchPosts =()=>{
    return async(dispatch)=>{
        dispatch({type: 'FETCH_POSTS_REQUEST'})
        try{
            const response = await fetch('https://jsonplaceholder.typicode.com/posts')
            const data = await response.json()
            dispatch({type: 'FETCH_POSTS_SUCCESS',payload: data})
    
        }catch(e){
            dispatch({type:'FETCH_POSTS_FAILURE',payload:e.message})
        }
    }
}

PostList.js:


import React, { useEffect } from 'react'
import {useSelector, useDispatch} from 'react-redux'
import { fetchPosts } from '../actions/postActions'

function PostList() {
    const dispatch = useDispatch()
    const {posts = [],loading=false,error=null} = useSelector((state)=>state.postState) || {}

    useEffect(()=>{
        dispatch(fetchPosts())
    },[dispatch])


    if(loading) return <p>loading</p>
    if(error) return <p>error</p>


  return (
    <div>
      <h2>Posts</h2>
      <ul>
        {posts.map((post)=> (
            <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  )
}

export default PostList

loggerMiddleware.js:

const loggerMiddleware = (store) => (next) => (action) =>{
    console.log('Dispatching',action)
    let result = next(action)
    console.log('Next State:',store.getState())
    return result
}

export default loggerMiddleware

postReducer.js:

const initialState = {
    posts: [],
    loading: false,
    error: null,
}

const postReducer = (state = initialState, action)=>{
    switch(action.type){
        case 'FETCH_POSTS_REQUEST':
            return {...state, loading: true, error: null}
        case 'FETCH_POSTS_SUCCESS':
            return {...state, loading: false, posts: action.payload}
        case 'FETCH_POSTS_FAILURE':
            return {...state, loading: false, error: action.payload}
        default:
            return state
    }
}

export default postReducer

rootReducer.js

import { combineReducers } from "redux";
import postReducer from "./postReducer";


const rootReducer = combineReducers({
    postState: postReducer
})

export default rootReducer

store.js

import { createStore, applyMiddleware } from "redux";
import {thunk} from 'redux-thunk'
//import {composeWithDevTools} from 'redux-devtools-extension'
import rootReducer from '../reducers/rootReducer'
import loggerMiddleware from "../middleware/loggerMiddleware";
import {configureStore} from '@reduxjs/toolkit'

const store = configureStore({
    reducer: rootReducer,
    middleware: (getDefaultMiddleware)=>
        getDefaultMiddleware().concat(loggerMiddleware),
    devTools: true,
})

export default store
